'use strict';

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _seamlessImmutable = require('seamless-immutable');

var _seamlessImmutable2 = _interopRequireDefault(_seamlessImmutable);

var _ = require('.');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var initialState = {
  count: 0
};

var setUp = {
  state: null
};

var actions = { DECREMENT: 'decrement', INCREMENT: 'increment', DUMMY: 'dummy' };

var dummyAction = { type: actions.DUMMY };
var decrementAction = { type: actions.DECREMENT, target: 'count' };
var incrementAction = { type: actions.INCREMENT, target: 'count' };

beforeEach(function () {
  setUp.state = (0, _seamlessImmutable2.default)(initialState);
});

describe('createReducer', function () {
  it('Throws if no reducer description is passed', function () {
    expect(function () {
      return (0, _2.default)({}, null);
    }).toThrowError(Error, 'Expected a reducer description as an object.');
  });
  it('Throws if a non object reducer description is passed', function () {
    expect(function () {
      return (0, _2.default)({}, []);
    }).toThrowError(Error, 'Expected a reducer description as an object.');
  });
  it('Initializes state correctly', function () {
    var reducerDescription = {};
    var reducer = (0, _2.default)(setUp.state, reducerDescription);
    expect(reducer(setUp.state, dummyAction).count).toBe(setUp.state.count);
  });
  it('Does not handle unknown actions', function () {
    var reducerDescription = (0, _defineProperty3.default)({}, actions.INCREMENT, function (state) {
      return state.merge({ count: state.count + 1 });
    });
    var reducer = (0, _2.default)(setUp.state, reducerDescription);
    setUp.state = reducer(setUp.state, incrementAction);
    setUp.state = reducer(setUp.state, decrementAction);
    setUp.state = reducer(setUp.state, incrementAction);
    expect(setUp.state.count).toBe(2);
  });
  it('Does handle multiple actions', function () {
    var _reducerDescription2;

    var reducerDescription = (_reducerDescription2 = {}, (0, _defineProperty3.default)(_reducerDescription2, actions.INCREMENT, function (state) {
      return state.merge({ count: state.count + 1 });
    }), (0, _defineProperty3.default)(_reducerDescription2, actions.DECREMENT, function (state) {
      return state.merge({ count: state.count - 1 });
    }), _reducerDescription2);
    var reducer = (0, _2.default)(setUp.state, reducerDescription);
    setUp.state = reducer(setUp.state, incrementAction);
    setUp.state = reducer(setUp.state, decrementAction);
    setUp.state = reducer(setUp.state, incrementAction);
    expect(setUp.state.count).toBe(1);
  });
});