'use strict';

var _seamlessImmutable = require('seamless-immutable');

var _seamlessImmutable2 = _interopRequireDefault(_seamlessImmutable);

var _createReducer = require('../../creators/createReducer');

var _createReducer2 = _interopRequireDefault(_createReducer);

var _ = require('.');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var initialState = {
  aTarget: [1, 2, 4, 6, 1]
};

var setUp = {
  state: null
};

beforeEach(function () {
  setUp.state = (0, _seamlessImmutable2.default)(initialState);
});

describe('onDeleteByIndex', function () {
  it('By default, deletes reading index from payload', function () {
    var reducer = (0, _createReducer2.default)(setUp.state, {
      '@@ACTION/DELETE': (0, _2.default)()
    });
    var newState = reducer(setUp.state, { type: '@@ACTION/DELETE', payload: 0, target: 'aTarget' });
    expect(newState.aTarget).toEqual([2, 4, 6, 1]);
    newState = reducer(newState, { type: '@@ACTION/DELETE', payload: 2, target: 'aTarget' });
    expect(newState.aTarget).toEqual([2, 4, 1]);
    newState = reducer(newState, { type: '@@ACTION/DELETE', payload: 2, target: 'aTarget' });
    expect(newState.aTarget).toEqual([2, 4]);
  });
  it('By default, does not throw on index out of range', function () {
    var reducer = (0, _createReducer2.default)(setUp.state, {
      '@@ACTION/DELETE': (0, _2.default)()
    });
    var newState = reducer(setUp.state, { type: '@@ACTION/DELETE', payload: 200, target: 'aTarget' });
    expect(newState.aTarget).toEqual(setUp.state.aTarget);
  });
  it('May receive the index via custom payload', function () {
    var reducer = (0, _createReducer2.default)(setUp.state, {
      '@@ACTION/DELETE': (0, _2.default)(function (action) {
        return action.payload.index;
      })
    });
    var newState = reducer(setUp.state, { type: '@@ACTION/DELETE', payload: { index: 3 }, target: 'aTarget' });
    expect(newState.aTarget).toEqual([1, 2, 4, 1]);
  });
  it('Is secure for -1 value', function () {
    var reducer = (0, _createReducer2.default)(setUp.state, {
      '@@ACTION/DELETE': (0, _2.default)()
    });
    // A missing value, wrongCalculatedIndexUseOnDeleteInstead will be -1
    var wrongCalculatedIndexUseOnDeleteInstead = setUp.state.aTarget.indexOf(5);
    var newState = reducer(setUp.state, { type: '@@ACTION/DELETE', payload: wrongCalculatedIndexUseOnDeleteInstead, target: 'aTarget' });
    expect(newState.aTarget).toEqual(setUp.state.aTarget);
  });
});