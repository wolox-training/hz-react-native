'use strict';

var _seamlessImmutable = require('seamless-immutable');

var _seamlessImmutable2 = _interopRequireDefault(_seamlessImmutable);

var _createReducer = require('../../creators/createReducer');

var _createReducer2 = _interopRequireDefault(_createReducer);

var _ = require('.');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var initialState = {
  target: null,
  targetLoading: true,
  targetError: 'Some error'
};

var setUp = {
  state: null
};

beforeEach(function () {
  setUp.state = (0, _seamlessImmutable2.default)(initialState);
});

describe('onSuccess', function () {
  it('Sets correctly target with error and loading', function () {
    var reducer = (0, _createReducer2.default)(setUp.state, {
      '@@ACTION/TYPE': (0, _2.default)()
    });
    var newState = reducer(setUp.state, { type: '@@ACTION/TYPE', target: 'target', payload: 'Success Payload' });
    expect(newState).toEqual({
      target: 'Success Payload',
      targetLoading: false,
      targetError: null
    });
  });
  it('Sets conditionally target content based on payload', function () {
    var reducer = (0, _createReducer2.default)(setUp.state, {
      '@@ACTION/TYPE': (0, _2.default)(function (action, state) {
        return action.payload + (state[action.target] || 0);
      })
    });
    var incrementAction = { type: '@@ACTION/TYPE', target: 'target', payload: 1 };
    setUp.state = reducer(setUp.state, incrementAction);
    setUp.state = reducer(setUp.state, incrementAction);
    expect(setUp.state).toEqual({
      target: 2,
      targetLoading: false,
      targetError: null
    });
  });
});