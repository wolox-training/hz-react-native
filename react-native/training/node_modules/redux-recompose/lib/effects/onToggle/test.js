'use strict';

var _seamlessImmutable = require('seamless-immutable');

var _seamlessImmutable2 = _interopRequireDefault(_seamlessImmutable);

var _createReducer = require('../../creators/createReducer');

var _createReducer2 = _interopRequireDefault(_createReducer);

var _ = require('.');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var initialState = {
  target: false
};

var setUp = {
  state: null
};

beforeEach(function () {
  setUp.state = (0, _seamlessImmutable2.default)(initialState);
});

describe('onToggle', function () {
  it('Sets target content based on state value', function () {
    var reducer = (0, _createReducer2.default)(setUp.state, {
      '@@ACTION/TYPE': (0, _2.default)()
    });
    var toggleAction = { type: '@@ACTION/TYPE', target: 'target' };
    setUp.state = reducer(setUp.state, toggleAction);
    expect(setUp.state).toEqual({
      target: true
    });

    setUp.state = reducer(setUp.state, toggleAction);
    expect(setUp.state).toEqual({
      target: false
    });
  });
  it('Sets target content based on payload', function () {
    var reducer = (0, _createReducer2.default)(setUp.state, {
      '@@ACTION/TYPE': (0, _2.default)()
    });
    setUp.state = reducer(setUp.state, { type: '@@ACTION/TYPE', target: 'target', payload: true });
    expect(setUp.state).toEqual({
      target: true
    });

    setUp.state = reducer(setUp.state, { type: '@@ACTION/TYPE', target: 'target', payload: false });
    expect(setUp.state).toEqual({
      target: false
    });
  });
});