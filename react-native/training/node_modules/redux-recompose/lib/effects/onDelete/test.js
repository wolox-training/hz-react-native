'use strict';

var _seamlessImmutable = require('seamless-immutable');

var _seamlessImmutable2 = _interopRequireDefault(_seamlessImmutable);

var _createReducer = require('../../creators/createReducer');

var _createReducer2 = _interopRequireDefault(_createReducer);

var _ = require('.');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var initialState = {
  numberList: [4, 2, 3, 4, 1],
  objectList: [{ id: 1 }, { id: 2 }, { id: 3 }],
  dragonList: [{ name: 'Ysera', color: 'green' }, { name: 'Nefarian', color: 'red' }, { name: 'Chromaggus', color: 'blue' }, { name: 'Alexstraza', color: 'gray' }, { name: 'Nozdormu', color: 'yellow' }, { name: 'DeathWing', color: 'black' }, { name: 'Red-Eyes Black Dragon', color: 'black' }]
};

var setUp = {
  state: null
};

beforeEach(function () {
  setUp.state = (0, _seamlessImmutable2.default)(initialState);
});

describe('onDelete', function () {
  it('Deletes objects based on IDs by default', function () {
    var reducer = (0, _createReducer2.default)(setUp.state, {
      '@@ACTION/FILTER_OBJECT': (0, _2.default)()
    });
    var newState = reducer(setUp.state, { type: '@@ACTION/FILTER_OBJECT', payload: 2, target: 'objectList' });
    expect(newState.objectList).toEqual([{ id: 1 }, { id: 3 }]);
  });

  it('Deletes objects based on a payload', function () {
    var reducer = (0, _createReducer2.default)(setUp.state, {
      '@@ACTION/FILTER_OBJECT': (0, _2.default)(function (action) {
        return action.payload.id;
      })
    });
    var newState = reducer(setUp.state, { type: '@@ACTION/FILTER_OBJECT', payload: { id: 1 }, target: 'objectList' });
    expect(newState.objectList).toEqual([{ id: 2 }, { id: 3 }]);
  });

  it('Deletes objects based on items characteristics', function () {
    var reducer = (0, _createReducer2.default)(setUp.state, {
      // item => item.id is the item selector by default
      '@@ACTION/FILTER_NUMBER': (0, _2.default)(null, function (item) {
        return item;
      })
    });
    var newState = reducer(setUp.state, { type: '@@ACTION/FILTER_NUMBER', payload: 4, target: 'numberList' });
    expect(newState.numberList).toEqual([2, 3, 1]);
  });

  it('May combine action and item selectors with a custom comparison', function () {
    var reducer = (0, _createReducer2.default)(setUp.state, {
      '@@ACTION/FILTER_DRAGONS': (0, _2.default)(null, null, function (item, action) {
        return action.payload.name === item.name || action.payload.color === item.color;
      })
    });
    var newState = reducer(setUp.state, { type: '@@ACTION/FILTER_DRAGONS', payload: { color: 'black', name: 'Ysera' }, target: 'dragonList' });
    expect(newState.dragonList).toEqual([{ name: 'Ysera', color: 'green' }, { name: 'DeathWing', color: 'black' }, { name: 'Red-Eyes Black Dragon', color: 'black' }]);
  });
});