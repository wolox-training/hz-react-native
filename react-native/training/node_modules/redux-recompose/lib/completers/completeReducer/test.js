'use strict';

var _seamlessImmutable = require('seamless-immutable');

var _seamlessImmutable2 = _interopRequireDefault(_seamlessImmutable);

var _createReducer = require('../../creators/createReducer');

var _createReducer2 = _interopRequireDefault(_createReducer);

var _createModalActions = require('../../creators/createModalActions');

var _createModalActions2 = _interopRequireDefault(_createModalActions);

var _onFailure = require('../../effects/onFailure');

var _onFailure2 = _interopRequireDefault(_onFailure);

var _ = require('.');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var initialState = {
  target: 1,
  targetLoading: false,
  targetError: null,
  modalIsOpen: false,
  modalContent: null
};

var setUp = {
  state: null
};

beforeEach(function () {
  setUp.state = (0, _seamlessImmutable2.default)(initialState);
});

describe('completeReducer', function () {
  it('Throws if a reducer description is not present', function () {
    expect(function () {
      return (0, _2.default)(null);
    }).toThrow(Error, 'Reducer description is incomplete, should contain at least a primaryActions field');
  });
  it('Throws if a reducer description has not a primaryActions field', function () {
    expect(function () {
      return (0, _2.default)({ a: 1 });
    }).toThrow(Error, 'Reducer description is incomplete, should contain at least a primaryActions field');
  });
  it('Throws if primary actions is not an array of strings', function () {
    var reducerDescription = {
      primaryActions: [null, 'thing']
    };
    expect(function () {
      return (0, _2.default)(reducerDescription);
    }).toThrow(Error, 'Primary actions must be a string array');
  });
  it('Extends correctly the primary actions', function () {
    var reducerDescription = {
      primaryActions: ['@NAMESPACE/ACTION']
    };
    var reducer = (0, _createReducer2.default)(setUp.state, (0, _2.default)(reducerDescription));
    // onLoading for common action
    setUp.state = reducer(setUp.state, { type: '@NAMESPACE/ACTION', target: 'target' });
    expect(setUp.state.targetLoading).toBe(true);
    expect(setUp.state.targetError).toBeNull();
    expect(setUp.state.target).toBe(1);

    // onSuccess behavior
    setUp.state = reducer(setUp.state, { type: '@NAMESPACE/ACTION_SUCCESS', target: 'target', payload: 42 });
    expect(setUp.state.targetLoading).toBe(false);
    expect(setUp.state.targetError).toBeNull();
    expect(setUp.state.target).toBe(42);

    // yet another onLoading
    setUp.state = reducer(setUp.state, { type: '@NAMESPACE/ACTION', target: 'target' });
    expect(setUp.state.targetLoading).toBe(true);
    expect(setUp.state.targetError).toBeNull();
    expect(setUp.state.target).toBe(42);

    // onFailure behavior
    setUp.state = reducer(setUp.state, { type: '@NAMESPACE/ACTION_FAILURE', target: 'target', payload: 'Oops !' });
    expect(setUp.state.targetLoading).toBe(false);
    expect(setUp.state.targetError).toBe('Oops !');
    expect(setUp.state.target).toBe(42);
  });
  it('Overrides actions correctly', function () {
    var reducerDescription = {
      primaryActions: ['@NAMESPACE/ACTION'],
      override: {
        '@NAMESPACE/ACTION_FAILURE': (0, _onFailure2.default)(function (action) {
          return action.payload.message;
        }),
        '@NAMESPACE/ANOTHER': (0, _onFailure2.default)()
      }
    };
    var reducer = (0, _createReducer2.default)(setUp.state, (0, _2.default)(reducerDescription));
    setUp.state = reducer(setUp.state, { type: '@NAMESPACE/ACTION_FAILURE', target: 'target', payload: { message: 'ERror MACro' } });
    expect(setUp.state.targetError).toBe('ERror MACro');
    setUp.state = reducer(setUp.state, { type: '@NAMESPACE/ANOTHER', target: 'target', payload: 'Also known as Ermac' });
    expect(setUp.state.targetError).toBe('Also known as Ermac');
    // Flawless victory
  });
  it('Completes modal actions', function () {
    var reducerDescription = {
      modalActions: ['@NAMESPACE/MODAL']
    };
    var reducer = (0, _createReducer2.default)(setUp.state, (0, _2.default)(reducerDescription));
    var modal = (0, _createModalActions2.default)({ type: '@NAMESPACE/MODAL', target: 'modalIsOpen', contentTarget: 'modalContent' });
    setUp.state = reducer(setUp.state, modal.open('Title'));
    expect(setUp.state.modalIsOpen).toBe(true);
    expect(setUp.state.modalContent).toBe('Title');
    setUp.state = reducer(setUp.state, modal.close());
    expect(setUp.state.modalIsOpen).toBe(false);
    expect(setUp.state.modalContent).toBe(null);
  });
});