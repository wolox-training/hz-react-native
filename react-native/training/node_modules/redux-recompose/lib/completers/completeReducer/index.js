'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _onLoading = require('../../effects/onLoading');

var _onLoading2 = _interopRequireDefault(_onLoading);

var _onSuccess = require('../../effects/onSuccess');

var _onSuccess2 = _interopRequireDefault(_onSuccess);

var _onFailure = require('../../effects/onFailure');

var _onFailure2 = _interopRequireDefault(_onFailure);

var _onSubscribe = require('../../effects/onSubscribe');

var _onSubscribe2 = _interopRequireDefault(_onSubscribe);

var _onUnsubscribe = require('../../effects/onUnsubscribe');

var _onUnsubscribe2 = _interopRequireDefault(_onUnsubscribe);

var _typeUtils = require('../../utils/typeUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Given a reducer description, it returns a reducerHandler with all success and failure cases
function completeReducer(reducerDescription) {
  if (!reducerDescription || (!reducerDescription.primaryActions || !reducerDescription.primaryActions.length) && (!reducerDescription.modalActions || !reducerDescription.modalActions.length)) {
    throw new Error('Reducer description is incomplete, should contain at least an actions field to complete');
  }

  var reducerHandler = {};

  if (reducerDescription.primaryActions) {
    if (!(0, _typeUtils.isStringArray)(reducerDescription.primaryActions)) {
      throw new Error('Primary actions must be a string array');
    }
    reducerDescription.primaryActions.forEach(function (actionName) {
      reducerHandler[actionName] = (0, _onLoading2.default)();
      reducerHandler[actionName + '_SUCCESS'] = (0, _onSuccess2.default)();
      reducerHandler[actionName + '_FAILURE'] = (0, _onFailure2.default)();
    });
  }

  if (reducerDescription.modalActions) {
    if (!(0, _typeUtils.isStringArray)(reducerDescription.modalActions)) {
      throw new Error('Modal actions must be a string array');
    }
    reducerDescription.modalActions.forEach(function (actionName) {
      reducerHandler[actionName + '_OPEN'] = (0, _onSubscribe2.default)();
      reducerHandler[actionName + '_CLOSE'] = (0, _onUnsubscribe2.default)();
    });
  }

  if (reducerDescription.override) {
    if (!(0, _typeUtils.isValidObject)(reducerDescription.override)) {
      throw new Error('Reducer description containing a override is not an object');
    }
    reducerHandler = (0, _extends3.default)({}, reducerHandler, reducerDescription.override);
  }
  return reducerHandler;
}

exports.default = completeReducer;