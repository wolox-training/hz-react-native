'use strict';

var _ = require('.');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('completeTypes', function () {
  it('Completes from an array\'s element', function () {
    var arrTypes = ['AN_ACTION'];
    expect((0, _2.default)(arrTypes)).toEqual(['AN_ACTION', 'AN_ACTION_SUCCESS', 'AN_ACTION_FAILURE']);
  });
  it('Completes from an array of multiple elements', function () {
    var arrTypes = ['AN_ACTION', 'OTHER_ACTION', 'ANOTHER_ACTION'];
    expect((0, _2.default)(arrTypes)).toEqual(['AN_ACTION', 'AN_ACTION_SUCCESS', 'AN_ACTION_FAILURE', 'OTHER_ACTION', 'OTHER_ACTION_SUCCESS', 'OTHER_ACTION_FAILURE', 'ANOTHER_ACTION', 'ANOTHER_ACTION_SUCCESS', 'ANOTHER_ACTION_FAILURE']);
  });
  it('Does not complete from exception cases', function () {
    var arrActions = ['AN_ACTION'];
    var exceptionCases = ['EXCEPT_ACTION'];
    expect((0, _2.default)(arrActions, exceptionCases)).toEqual(['AN_ACTION', 'AN_ACTION_SUCCESS', 'AN_ACTION_FAILURE', 'EXCEPT_ACTION']);
  });
  it('Throws if parameters are not string lists', function () {
    expect(function () {
      return (0, _2.default)(null);
    }).toThrow(Error, 'Types must be an array of strings');
    expect(function () {
      return (0, _2.default)(['ONE'], null);
    }).toThrow(Error, 'Exception cases from actions must be an array of strings');
  });
});