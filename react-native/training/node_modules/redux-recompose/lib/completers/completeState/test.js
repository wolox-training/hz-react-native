'use strict';

var _seamlessImmutable = require('seamless-immutable');

var _seamlessImmutable2 = _interopRequireDefault(_seamlessImmutable);

var _ = require('.');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var initialState = {
  target: 1,
  otherTarget: 2
};

var setUp = {
  state: null
};

beforeEach(function () {
  setUp.state = (0, _seamlessImmutable2.default)(initialState);
});

describe('completeState', function () {
  it('Extends all fields by default', function () {
    expect((0, _2.default)(setUp.state)).toEqual({
      target: 1,
      targetLoading: false,
      targetError: null,
      otherTarget: 2,
      otherTargetLoading: false,
      otherTargetError: null
    });
  });
  it('Extends only fields that are not excluded', function () {
    expect((0, _2.default)(setUp.state, ['otherTarget'])).toEqual({
      target: 1,
      targetLoading: false,
      targetError: null,
      otherTarget: 2
    });
  });
  it('Throws if an initial state is not provided', function () {
    expect(function () {
      return (0, _2.default)(null);
    }).toThrow(Error, 'Expected an object as a state to complete.');
  });
  it('Throws if ignored targets is not a list', function () {
    expect(function () {
      return (0, _2.default)({}, {});
    }).toThrow(Error, 'Expected an array of strings as ignored targets');
  });
  it('Throws if ignored targets is not a pure string array', function () {
    expect(function () {
      return (0, _2.default)({}, ['1', {}]);
    }).toThrow(Error, 'Expected an array of strings as ignored targets');
  });
});