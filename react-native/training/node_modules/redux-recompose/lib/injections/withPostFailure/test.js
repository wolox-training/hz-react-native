'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _asyncActionsUtils = require('../../utils/asyncActionsUtils');

var _asyncActionsUtils2 = _interopRequireDefault(_asyncActionsUtils);

var _createTypes = require('../../creators/createTypes');

var _createTypes2 = _interopRequireDefault(_createTypes);

var _ = require('.');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MockService = {
  fetchSomething: function () {
    var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt('return', new _promise2.default(function (resolve) {
                return resolve({ ok: true, data: 42 });
              }));

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, undefined);
    }));

    return function fetchSomething() {
      return _ref.apply(this, arguments);
    };
  }(),
  fetchFailureNotFound: function () {
    var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
      return _regenerator2.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt('return', new _promise2.default(function (resolve) {
                return resolve({ ok: false, problem: 'CLIENT_ERROR', status: 404 });
              }));

            case 1:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, undefined);
    }));

    return function fetchFailureNotFound() {
      return _ref2.apply(this, arguments);
    };
  }()
};

var actions = (0, _createTypes2.default)(['FETCH', 'FETCH_SUCCESS', 'FETCH_FAILURE', 'OTHER_ACTION'], '@TEST');

describe('withPostFailure', function () {
  it('Handles correctly post failure', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
    var store, actionsDispatched;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            store = (0, _asyncActionsUtils2.default)({});
            _context3.next = 3;
            return store.dispatch({
              type: actions.FETCH,
              target: 'aTarget',
              service: MockService.fetchFailureNotFound,
              injections: (0, _2.default)(function (dispatch) {
                return dispatch({ type: actions.OTHER_ACTION });
              })
            });

          case 3:
            actionsDispatched = store.getActions();

            expect(actionsDispatched).toEqual([{ type: actions.FETCH, target: 'aTarget' }, { type: actions.FETCH_FAILURE, target: 'aTarget', payload: 'CLIENT_ERROR' }, { type: actions.OTHER_ACTION }]);

          case 5:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  })));

  it('Does not dispatch on post failure in case of success', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
    var store, actionsDispatched;
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            store = (0, _asyncActionsUtils2.default)({});
            _context4.next = 3;
            return store.dispatch({
              type: actions.FETCH,
              target: 'aTarget',
              service: MockService.fetchSomething,
              injections: (0, _2.default)(function (dispatch) {
                return dispatch({ type: actions.OTHER_ACTION });
              })
            });

          case 3:
            actionsDispatched = store.getActions();

            expect(actionsDispatched).toEqual([{ type: actions.FETCH, target: 'aTarget' }, { type: actions.FETCH_SUCCESS, target: 'aTarget', payload: 42 }]);

          case 5:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  })));
});