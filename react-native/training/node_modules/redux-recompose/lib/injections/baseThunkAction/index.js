'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function baseThunkAction(_ref) {
  var _this = this;

  var type = _ref.type,
      target = _ref.target,
      service = _ref.service,
      _ref$payload = _ref.payload,
      payload = _ref$payload === undefined ? function () {} : _ref$payload,
      _ref$successSelector = _ref.successSelector,
      successSelector = _ref$successSelector === undefined ? function (response) {
    return response.data;
  } : _ref$successSelector,
      _ref$failureSelector = _ref.failureSelector,
      failureSelector = _ref$failureSelector === undefined ? function (response) {
    return response.problem;
  } : _ref$failureSelector;

  var selector = typeof payload === 'function' ? payload : function () {
    return payload;
  };

  return {
    prebehavior: function prebehavior(dispatch) {
      return dispatch({ type: type, target: target });
    },
    apiCall: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(getState) {
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt('return', service(selector(getState())));

              case 1:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this);
      }));

      return function apiCall(_x) {
        return _ref2.apply(this, arguments);
      };
    }(),
    determination: function determination(response) {
      return response.ok;
    },
    success: function success(dispatch, response) {
      return dispatch({ type: type + '_SUCCESS', target: target, payload: successSelector(response) });
    },
    failure: function failure(dispatch, response) {
      return dispatch({ type: type + '_FAILURE', target: target, payload: failureSelector(response) });
    }
  };
}

exports.default = baseThunkAction;