'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

/**
 * Don't include the response bodies for images by default.
 */
var DEFAULT_CONTENT_TYPES_RX = /^(image)\/.*$/i;

/**
 * Sets up the apisauce reactotron plugin
 */
var index = (function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function (reactotron) {
    // a RegExp to suppess adding the body cuz it costs a lot to serialize
    var ignoreContentTypes = options.ignoreContentTypes || DEFAULT_CONTENT_TYPES_RX;

    // apisauce uses axios, so let's deconstruct that format
    var convertResponse = function convertResponse() {
      var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var config = source.config || {};

      // the request
      var request = {
        url: config.url,
        method: config.method,
        data: config.data || null,
        headers: config.headers,
        params: config.params || null

        // the response
      };var responseHeaders = source.headers || {};
      var contentType = responseHeaders['content-type'] || responseHeaders['Content-Type'];
      var useRealBody = (typeof source.data === 'string' || _typeof(source.data) === 'object') && !ignoreContentTypes.test(contentType || '');
      var body = useRealBody ? source.data : '~~~ skipped ~~~';
      var response = {
        body: body,
        status: source.status,
        headers: responseHeaders

        // return all 3
      };return [request, response, source.duration];
    };
    return {
      features: {
        apisauce: function apisauce(source) {
          return reactotron.apiResponse.apply(reactotron, toConsumableArray(convertResponse(source)));
        }
      }
    };
  };
});

module.exports = index;
